<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Guoqing Geng</title>
    <link>https://hellokangning.github.io/en/categories/redis/</link>
    <description>Recent content in Redis on Guoqing Geng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Nov 2018 09:26:50 +0800</lastBuildDate>
    
	<atom:link href="https://hellokangning.github.io/en/categories/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis Internals: SDS</title>
      <link>https://hellokangning.github.io/en/post/redis-internals-sds/</link>
      <pubDate>Thu, 01 Nov 2018 09:26:50 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/en/post/redis-internals-sds/</guid>
      <description>&lt;p&gt;C string is used only for literal constant in Redis. For the situation that the string can be modified, Redis provide a Simple Dynamic String(SDS). The key in Redis is actually a SDS, and if you insert a key-value with &lt;code&gt;SET msg &amp;quot;hello world&amp;quot;&lt;/code&gt;, a SDS instance will be constructed for the key. In this case, the value is also a SDS instance with the content of &amp;ldquo;hello world&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Besides string, SDS is also used for buffer which can serve the AOF module and client&amp;rsquo;s input.&lt;/p&gt;

&lt;p&gt;This post will dive into the implementation of SDS comparing with classic C string.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What Happens When Starting Redis</title>
      <link>https://hellokangning.github.io/en/post/what-happens-when-starting-redis/</link>
      <pubDate>Mon, 22 Oct 2018 17:23:59 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/en/post/what-happens-when-starting-redis/</guid>
      <description>&lt;p&gt;Redis is a great example of high-performance server. When I worked as a backend developer, my mentor recommended that I should read the code of Redis. And so I did, it&amp;rsquo;s rewarding. As the time goes by, the ideas behind Redis are still cutting-edge, so I think it&amp;rsquo;s time to retrospect the implementation of Redis. This post is a good beginning.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s my habit to start from the entry when meeting a big project. In Redis, &lt;code&gt;server.c&lt;/code&gt; is responsible for bootstrap, that&amp;rsquo;s what I pay close attention to in this post.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis Mind Map</title>
      <link>https://hellokangning.github.io/en/post/redis-mind-map/</link>
      <pubDate>Sun, 06 Nov 2016 21:20:07 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/en/post/redis-mind-map/</guid>
      <description>&lt;p&gt;This post includes a few mind maps for Redis ranging from quick start to implementation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hellokangning.github.io/images/redis-quick-start.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>