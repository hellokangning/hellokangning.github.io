<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Guoqing Geng</title>
    <link>https://hellokangning.github.io/categories/python/</link>
    <description>Recent content in Python on Guoqing Geng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Sep 2017 19:36:07 +0800</lastBuildDate>
    
	<atom:link href="https://hellokangning.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding Python Decorator</title>
      <link>https://hellokangning.github.io/post/understanding-python-decorator/</link>
      <pubDate>Wed, 20 Sep 2017 19:36:07 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/understanding-python-decorator/</guid>
      <description>&lt;p&gt;A Python decorator, similar with &lt;a href=&#34;http://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;Decorator Parttern&lt;/a&gt;, is a specific change to the Python syntax that allows us to more conveniently alter functions and methods. In this post, I will try my best to deep into this advanced feature in Python.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>*args and **kwargs Usage in Python</title>
      <link>https://hellokangning.github.io/post/args-and-kwargs-usage-in-python/</link>
      <pubDate>Fri, 08 Sep 2017 16:46:50 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/args-and-kwargs-usage-in-python/</guid>
      <description>&lt;p&gt;The &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; is a common idiom to allow arbitrary number of arguments to functions as described in the section more on &lt;a href=&#34;https://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions&#34;&gt;defining functions&lt;/a&gt; in the Python documentation.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>When finally Really Executes</title>
      <link>https://hellokangning.github.io/post/when-finally-really-executes/</link>
      <pubDate>Mon, 04 Sep 2017 16:22:03 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/when-finally-really-executes/</guid>
      <description>Let&amp;rsquo;s be forthright, what will the following code print?
def func(): try: 100/0 except ZeroDivisionError as e: print &#39;Zero cannot be divisor&#39; return finally: print &#39;finally&#39; if __name__ == &amp;quot;__main__&amp;quot;: func()  The answer is:
Zero cannot be divisor finally  It seems that finally executes after the return statement. Is it a truth? We&amp;rsquo;s better change the code a little to penetrate the result.
#!/usr/bin/env python2 # coding=utf-8 from dis import dis def func(): try: 100/0 except ZeroDivisionError as e: print &#39;Zero cannot be divisor&#39; return finally: print &#39;finally&#39; if __name__ == &amp;quot;__main__&amp;quot;: dis(func)  Next point, we can see,</description>
    </item>
    
    <item>
      <title>Exit Options in Python</title>
      <link>https://hellokangning.github.io/post/exit-options-in-python/</link>
      <pubDate>Fri, 01 Sep 2017 16:47:37 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/exit-options-in-python/</guid>
      <description>First candidate is os._exit, which exits without calling cleanup handlers, flushing stdio buffers, etc. (and which should normally only be used in the child process after a fork()).
Second, sys.exit is intended for use in programs. According to official document:
 This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level.</description>
    </item>
    
    <item>
      <title>The Difference between range and xrange</title>
      <link>https://hellokangning.github.io/post/difference-between-range-and-xrange/</link>
      <pubDate>Fri, 01 Sep 2017 16:22:27 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/difference-between-range-and-xrange/</guid>
      <description>Short answer:
 range creates a list, so if you do range(1, 10000000) it creates a list in memory with 9999999 elements. This will become an expensive operation on very large ranges. xrange is a sequence object that evaluates lazily(it will only compute the next value when needed).  For performance, especially when you&amp;rsquo;re iterating over a large range, xrange() is usually better. However, there are still a few cases why you might prefer range():</description>
    </item>
    
    <item>
      <title>A Dive into __slots__</title>
      <link>https://hellokangning.github.io/post/a-dive-into-slots/</link>
      <pubDate>Thu, 31 Aug 2017 14:25:37 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/a-dive-into-slots/</guid>
      <description>Every class have instance attributes, no matter what kind of programming language. By default, Python uses a dict(__dict__) to store an object&amp;rsquo;s instance attributes, which allows you setting arbitary new attributes at runtime handily.
class Bird(object): fly = True def __init__(self, age): self.age = age print Bird.__dict # {&#39;fly&#39;: True, &#39;__module__&#39;: &#39;__main__&#39;, &#39;__dict__&#39;: &amp;lt;attribute &#39;__dict__&#39; of &#39;Bird&#39; objects&amp;gt;, &#39;__weakref__&#39;: &amp;lt;attribute &#39;__weakref__&#39; of &#39;Bird&#39; objects&amp;gt;, &#39;__doc__&#39;: None, &#39;__init__&#39;: &amp;lt;function __init__ at 0x1052cbf50&amp;gt;} larry = Bird(2) print larry.</description>
    </item>
    
    <item>
      <title>Pip Install ipython Exception on EI Capitan</title>
      <link>https://hellokangning.github.io/post/pip-install-ipython-exception-on-ei-capitan/</link>
      <pubDate>Thu, 03 Aug 2017 15:23:36 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/pip-install-ipython-exception-on-ei-capitan/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;For those impatient: OS X EI Capition shipped a security feature named System Integrity Protection, which would be a hinder for &lt;code&gt;pip&lt;/code&gt;. Try to install IPython in user mode: &lt;code&gt;pip install ipython --user&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>