<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on Qing&#39;s Landing</title>
    <link>https://hellokangning.github.io/tags/jvm/</link>
    <description>Recent content in JVM on Qing&#39;s Landing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Oct 2018 14:25:16 +0800</lastBuildDate>
    
	<atom:link href="https://hellokangning.github.io/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What Is the Concurrent Mode Failure?</title>
      <link>https://hellokangning.github.io/post/what-is-the-concurrent-mode-failure/</link>
      <pubDate>Wed, 31 Oct 2018 14:25:16 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/what-is-the-concurrent-mode-failure/</guid>
      <description>&lt;p&gt;This is a question that I was asked during an interview: what does the concurrent mode failure means? It&amp;rsquo;s really a good question to check your understanding of Concurrent Mark Sweep (CMS) Collector.&lt;/p&gt;
&lt;p&gt;This post starts with concurrent mode failure and explains the whole steps of one CMS cycle.&lt;/p&gt;
&lt;p&gt;In a nutshell,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The message &amp;ldquo;concurrent mode failure&amp;rdquo; signifies that the concurrent collection of the Old Generation did not finish before the Old Generation became full.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>JVM Series: class File Format</title>
      <link>https://hellokangning.github.io/post/jvm-series-class-file-format/</link>
      <pubDate>Thu, 17 May 2018 16:52:29 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/jvm-series-class-file-format/</guid>
      <description>&lt;p&gt;Today, let&amp;rsquo;s focus on the &lt;code&gt;class&lt;/code&gt; file format, the hardware- and operating system-independent binary format used to represent compiled classes and interfaces.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;class&lt;/code&gt; file consists of a stream of 8-bit bytes. All 16-bit, 32-bit, and 64-bit quantities are constructed by reading in two, four, and eight consecutive 8-bit bytes, respectively.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM Series: Class Loader</title>
      <link>https://hellokangning.github.io/post/jvm-series-class-loader/</link>
      <pubDate>Wed, 18 Apr 2018 18:27:20 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/jvm-series-class-loader/</guid>
      <description>&lt;p&gt;The Java Classloader, a part of the Java Runtime Environment, dynamically loads Java classes into the Java Virtual Machine. Each Java class must be loaded by a class loader.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM Series: Oop and Klass</title>
      <link>https://hellokangning.github.io/post/jvm-series-oop-klass/</link>
      <pubDate>Tue, 10 Apr 2018 14:46:26 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/jvm-series-oop-klass/</guid>
      <description>&lt;p&gt;As a part of &lt;a href=&#34;https://hellokangning.github.io/en/tags/jvm/&#34;&gt;JVM Series&lt;/a&gt;, this post tries to explore the object model in JVM.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM Series: Overview</title>
      <link>https://hellokangning.github.io/post/jvm-series-overview/</link>
      <pubDate>Tue, 09 Jan 2018 20:56:47 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/jvm-series-overview/</guid>
      <description>&lt;p&gt;When executing a java program, you may simply input in terminal, like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;javac HelloWorld.java
java HelloWorld
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Behind these commands, JVM, as the cornerstone of the Java platform, does a lot of work, which are what this blog attempts to figure out. Today, a new series about JVM will be started, and this is the first episode.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mind Maps for Java and JVM</title>
      <link>https://hellokangning.github.io/post/java-jvm-mind-map/</link>
      <pubDate>Fri, 16 Jun 2017 18:14:16 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/java-jvm-mind-map/</guid>
      <description>&lt;p&gt;These two mind maps are drawn for the further exploration of Java and JVM. For Java I try to cover some advanced features ranging from NIO and Thread. As to JVM, few components are covered, of course, I will replenish it at any moment.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>