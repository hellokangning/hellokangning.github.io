<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guoqing Geng</title>
    <link>https://hellokangning.github.io/</link>
    <description>Recent content on Guoqing Geng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 May 2017 21:49:20 +0200</lastBuildDate>
    
	<atom:link href="https://hellokangning.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://hellokangning.github.io/about/</link>
      <pubDate>Fri, 19 May 2017 21:49:20 +0200</pubDate>
      
      <guid>https://hellokangning.github.io/about/</guid>
      <description>My name is Guoqing Geng. I was born and raised in China(ðŸ‡¨ðŸ‡³), currently work as a Big Data Engineer, with technology stack including but not limited to:
 HBase Elasticsearch Spark  Programming Languages I usually cope with:
 C++ Python Scala  </description>
    </item>
    
    <item>
      <title>A Troubleshooting for Threads Explosion in HBase Client</title>
      <link>https://hellokangning.github.io/post/troubleshooting-for-threads-explosion-in-hbase-client/</link>
      <pubDate>Fri, 09 Mar 2018 18:27:56 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/troubleshooting-for-threads-explosion-in-hbase-client/</guid>
      <description>&lt;p&gt;An issue, excessive threads of HBase client, annoyed me for a quite while. It reminds me to penetrate into uses of &lt;code&gt;Executorservice&lt;/code&gt; in HBase client. That&amp;rsquo;s the origin of this blog.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HBase Batch Puts with BufferedMutator</title>
      <link>https://hellokangning.github.io/post/hbase-batch-puts-with-bufferedmutator/</link>
      <pubDate>Mon, 15 Jan 2018 16:56:23 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/hbase-batch-puts-with-bufferedmutator/</guid>
      <description>&lt;p&gt;&lt;code&gt;BufferedMutator&lt;/code&gt; is meant for batched, potentially asynchronous puts into a single table. This class relies heavily on &lt;code&gt;AsyncProcess&lt;/code&gt;, which I has explained &lt;a href=&#34;https://hellokangning.github.io/post/hbase-batch-puts-without-bufferedmutator/#asyncprocess&#34;&gt;here&lt;/a&gt;. Then, we can focus on what &lt;code&gt;BufferedMutator&lt;/code&gt; does in this post.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM Series: Overview</title>
      <link>https://hellokangning.github.io/post/jvm-series-overview/</link>
      <pubDate>Tue, 09 Jan 2018 20:56:47 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/jvm-series-overview/</guid>
      <description>&lt;p&gt;When executing a java program, you may simply input in terminal, like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;javac HelloWorld.java
java HelloWorld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Behind these commands, JVM, as the cornerstone of the Java platform, does a lot of work, which are what this blog attempts to figure out. Today, a new series about JVM will be started, and this is the first episode.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HBase Batch Puts without BufferedMutator</title>
      <link>https://hellokangning.github.io/post/hbase-batch-puts-without-bufferedmutator/</link>
      <pubDate>Tue, 09 Jan 2018 11:33:34 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/hbase-batch-puts-without-bufferedmutator/</guid>
      <description>&lt;p&gt;For batch puts, it&amp;rsquo;s better if you construct a list of puts and then call &lt;code&gt;HTable.put(final List&amp;lt;Put&amp;gt; puts)&lt;/code&gt;, because it uses a single RPC call to commit the batch, but depending on the size of the list write buffer may flush it all or not.&lt;/p&gt;

&lt;p&gt;In this post, &lt;code&gt;BufferedMutator&lt;/code&gt; is excluded. It will be discussed in the near future.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2017 in Review and Look Ahead</title>
      <link>https://hellokangning.github.io/post/2017-in-review-look-ahead/</link>
      <pubDate>Wed, 03 Jan 2018 18:43:27 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/2017-in-review-look-ahead/</guid>
      <description>&lt;p&gt;After reading many blogs about retrospect of 2017, I realized that I should to do it too. it looks necessary and helpful.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Multiversion Concurrency Control in HBase</title>
      <link>https://hellokangning.github.io/post/multiversion-concurrency-control-in-hbase/</link>
      <pubDate>Wed, 27 Dec 2017 16:19:17 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/multiversion-concurrency-control-in-hbase/</guid>
      <description>&lt;p&gt;Multiversion Concurrency Control (MVCC for short) manages the read/write consistency. This provides an interface for readers to determine what entries to ignore, and a mechanism for writers to obtain new write numbers, then &amp;ldquo;commit&amp;rdquo; the new writes for readers to read (thus forming atomic transactions).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Lifecycle of HBase&#39;s Put: Server-side</title>
      <link>https://hellokangning.github.io/post/a-lifecycle-of-hbase-put-server-side/</link>
      <pubDate>Tue, 05 Dec 2017 15:14:28 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/a-lifecycle-of-hbase-put-server-side/</guid>
      <description>&lt;p&gt;Following the preceding &lt;a href=&#34;https://hellokangning.github.io/post/a-lifecycle-of-hbase-put-client-side/&#34;&gt;A Lifecycle of HBase&amp;rsquo;s Put: Client-side&lt;/a&gt;, this post will figure out how a &lt;code&gt;Put&lt;/code&gt; request does its mutation on &lt;code&gt;HRegionServer&lt;/code&gt;. The whole process involves WAL, MemStore, and Coprocessor etc. After reading this post, hope you make their roles clear.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Lifecycle of HBase&#39;s Put: Client-side</title>
      <link>https://hellokangning.github.io/post/a-lifecycle-of-hbase-put-client-side/</link>
      <pubDate>Fri, 24 Nov 2017 11:38:14 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/a-lifecycle-of-hbase-put-client-side/</guid>
      <description>&lt;p&gt;&lt;code&gt;Put&lt;/code&gt; is used to perform insert or update a single row of HBase table. It&amp;rsquo;s essential to understand its lifecycle, which can be breaked into two pieces,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Client-side, How the &lt;code&gt;put&lt;/code&gt; request is built up and sent to the right &lt;code&gt;RegionServer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Server-side, How the &lt;code&gt;RegionServer&lt;/code&gt; handle the &lt;code&gt;Put&lt;/code&gt; request and update one row.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In view of the limitation of one single post, the client-side is discussed only.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HBase Code Analysis: MemStore</title>
      <link>https://hellokangning.github.io/post/hbase-code-analysis-memstore/</link>
      <pubDate>Thu, 23 Nov 2017 11:39:43 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/hbase-code-analysis-memstore/</guid>
      <description>&lt;p&gt;The &lt;code&gt;MemStore&lt;/code&gt; holds in-memory modifications to the Store. This post deeps into the source code for sake of understanding what it really do underneath.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HBase Storage Internals</title>
      <link>https://hellokangning.github.io/post/hbase-storage-internals/</link>
      <pubDate>Thu, 16 Nov 2017 11:34:49 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/hbase-storage-internals/</guid>
      <description>&lt;p&gt;Overview&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An HBase &lt;code&gt;Table&lt;/code&gt; consists of multiple rows.&lt;/li&gt;
&lt;li&gt;Table will be splited into &lt;code&gt;Regions&lt;/code&gt; based on rows&amp;rsquo; lexicographical order.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Store&lt;/code&gt; corresponds to a column family for a table for a given region.&lt;/li&gt;
&lt;li&gt;A Store hosts a &lt;code&gt;MemStore&lt;/code&gt; and 0 or more &lt;code&gt;StoreFiles (HFiles)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The MemStore holds in-memory modifications to the Store.&lt;/li&gt;
&lt;li&gt;StoreFiles are composed of &lt;code&gt;Blocks&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Fixing Elasticsearch with Red Status</title>
      <link>https://hellokangning.github.io/post/fixing-elasticsearch-with-red-status/</link>
      <pubDate>Tue, 10 Oct 2017 10:05:01 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/fixing-elasticsearch-with-red-status/</guid>
      <description>&lt;p&gt;Elasticsearch&amp;rsquo;s red status means at least one primary shard (and all of its replicas) is missing. This reminds you of missing data: searches will return partial results, and indexing into that shard will return an exception.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding Python Decorator</title>
      <link>https://hellokangning.github.io/post/understanding-python-decorator/</link>
      <pubDate>Wed, 20 Sep 2017 19:36:07 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/understanding-python-decorator/</guid>
      <description>&lt;p&gt;A Python decorator, similar with &lt;a href=&#34;http://en.wikipedia.org/wiki/Decorator_pattern&#34;&gt;Decorator Parttern&lt;/a&gt;, is a specific change to the Python syntax that allows us to more conveniently alter functions and methods. In this post, I will try my best to deep into this advanced feature in Python.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JDK Build-in Development Tools</title>
      <link>https://hellokangning.github.io/post/jdk-build-in-development-tools/</link>
      <pubDate>Thu, 14 Sep 2017 16:20:46 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/jdk-build-in-development-tools/</guid>
      <description>&lt;p&gt;The following documents contain important information you will need to know to get the most out of the JDK tools.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>*args and **kwargs Usage in Python</title>
      <link>https://hellokangning.github.io/post/args-and-kwargs-usage-in-python/</link>
      <pubDate>Fri, 08 Sep 2017 16:46:50 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/args-and-kwargs-usage-in-python/</guid>
      <description>&lt;p&gt;The &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; is a common idiom to allow arbitrary number of arguments to functions as described in the section more on &lt;a href=&#34;https://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions&#34;&gt;defining functions&lt;/a&gt; in the Python documentation.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Does Client Find the Region</title>
      <link>https://hellokangning.github.io/post/how-does-client-find-the-region/</link>
      <pubDate>Fri, 08 Sep 2017 11:04:57 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/how-does-client-find-the-region/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;client-related source code is located in the module &lt;code&gt;hbase-client&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Directory in Lucene</title>
      <link>https://hellokangning.github.io/post/lucene-directory/</link>
      <pubDate>Tue, 05 Sep 2017 16:26:31 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/lucene-directory/</guid>
      <description>&lt;p&gt;&lt;code&gt;Directory&lt;/code&gt; represents the storage location of the indexes and generally it is a list of files. These files are called index files. Index files are normally created once and then used for read operation or can be deleted.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>When finally Really Executes</title>
      <link>https://hellokangning.github.io/post/when-finally-really-executes/</link>
      <pubDate>Mon, 04 Sep 2017 16:22:03 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/when-finally-really-executes/</guid>
      <description>&lt;p&gt;Epitome:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;return doesn&amp;rsquo;t really return, it pushs value to stack, then jumps to finally, which was set up by &lt;code&gt;SETUP_FINALLY&lt;/code&gt; before.&lt;/li&gt;
&lt;li&gt;after executing finally, &lt;code&gt;END_FINALLY&lt;/code&gt; returns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exit Options in Python</title>
      <link>https://hellokangning.github.io/post/exit-options-in-python/</link>
      <pubDate>Fri, 01 Sep 2017 16:47:37 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/exit-options-in-python/</guid>
      <description>First candidate is os._exit, which exits without calling cleanup handlers, flushing stdio buffers, etc. (and which should normally only be used in the child process after a fork()).
Second, sys.exit is intended for use in programs. According to official document:
 This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level.</description>
    </item>
    
    <item>
      <title>The Difference between range and xrange</title>
      <link>https://hellokangning.github.io/post/difference-between-range-and-xrange/</link>
      <pubDate>Fri, 01 Sep 2017 16:22:27 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/difference-between-range-and-xrange/</guid>
      <description>&lt;p&gt;Short answer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range&lt;/code&gt; creates a list, so if you do &lt;code&gt;range(1, 10000000)&lt;/code&gt; it creates a list in memory with 9999999 elements. This will become an expensive operation on very large ranges.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xrange&lt;/code&gt; is a sequence object that &lt;em&gt;evaluates lazily&lt;/em&gt;(it will only compute the next value when needed).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Dive into __slots__</title>
      <link>https://hellokangning.github.io/post/a-dive-into-slots/</link>
      <pubDate>Thu, 31 Aug 2017 14:25:37 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/a-dive-into-slots/</guid>
      <description>&lt;p&gt;&lt;code&gt;__slots__&lt;/code&gt; tells interpreter not to use a dict, and only allocate space for a fixed set of attributes.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to Read English Books</title>
      <link>https://hellokangning.github.io/post/how-to-read-english-books/</link>
      <pubDate>Thu, 10 Aug 2017 18:04:07 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/how-to-read-english-books/</guid>
      <description>For the sake of learning English, I try to read the original version of The Power of Now and Hackers and Painters. To be honest, it&amp;rsquo;s very difficult, two many unacquainted words and phrases. Even only one in a sentence would affect my understanding.
Therefore, I stopped my reading and searched on the Internet for better approach to do this. After a long surfing, Here is the tips that I summarized.</description>
    </item>
    
    <item>
      <title>Document in Lucene</title>
      <link>https://hellokangning.github.io/post/lucene-document/</link>
      <pubDate>Mon, 07 Aug 2017 18:52:01 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/lucene-document/</guid>
      <description>In Lucene, a Document is the unit of search and index.
 An index consists of a sequence of documents. A document contains of one or more Fields. A field is a named sequence of terms. A term is a string.  In order to index data with Lucene, you must convert it to a stream of plain-text tokens firstly. Based on the stream, the document containning fields will be created.</description>
    </item>
    
    <item>
      <title>Guice Usage in Elasticsearch</title>
      <link>https://hellokangning.github.io/post/guice-usage-in-es/</link>
      <pubDate>Fri, 04 Aug 2017 15:58:27 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/guice-usage-in-es/</guid>
      <description>The motivation of using Guice lists here: Motivation.
To create bindings, extend AbstractModule and override its configure method. In the method body, call bind() to specify each binding. These methods are type checked so the compiler can report errors if you use the wrong types. Once you&amp;rsquo;ve created your modules, pass them as arguments to Guice.createInjector() to build an injector.
Elasticsearch has a ModulesBuilder which is responsible for assembling modules.</description>
    </item>
    
    <item>
      <title>Pip Install ipython Exception on EI Capitan</title>
      <link>https://hellokangning.github.io/post/pip-install-ipython-exception-on-ei-capitan/</link>
      <pubDate>Thu, 03 Aug 2017 15:23:36 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/post/pip-install-ipython-exception-on-ei-capitan/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;For those impatient: OS X EI Capition shipped a security feature named System Integrity Protection, which would be a hinder for &lt;code&gt;pip&lt;/code&gt;. Try to install IPython in user mode: &lt;code&gt;pip install ipython --user&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>