<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guoqing Geng</title>
    <link>https://hellokangning.github.io/</link>
    <description>Recent content on Guoqing Geng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <lastBuildDate>Thu, 31 Aug 2017 14:25:37 +0800</lastBuildDate>
    
	<atom:link href="https://hellokangning.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A dive into __slots__</title>
      <link>https://hellokangning.github.io/2017/08/31/a-dive-into-__slots__/</link>
      <pubDate>Thu, 31 Aug 2017 14:25:37 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/2017/08/31/a-dive-into-__slots__/</guid>
      <description>Every class have instance attributes, no matter what kind of programming language. By default, Python uses a dict(__dict__) to store an object&amp;rsquo;s instance attributes, which allows you setting arbitary new attributes at runtime handily.
class Bird(object): fly = True def __init__(self, age): self.age = age print Bird.__dict # {&#39;fly&#39;: True, &#39;__module__&#39;: &#39;__main__&#39;, &#39;__dict__&#39;: &amp;lt;attribute &#39;__dict__&#39; of &#39;Bird&#39; objects&amp;gt;, &#39;__weakref__&#39;: &amp;lt;attribute &#39;__weakref__&#39; of &#39;Bird&#39; objects&amp;gt;, &#39;__doc__&#39;: None, &#39;__init__&#39;: &amp;lt;function __init__ at 0x1052cbf50&amp;gt;} larry = Bird(2) print larry.</description>
    </item>
    
    <item>
      <title>How to read English books</title>
      <link>https://hellokangning.github.io/2017/08/10/how-to-read-english-books/</link>
      <pubDate>Thu, 10 Aug 2017 18:04:07 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/2017/08/10/how-to-read-english-books/</guid>
      <description>For the sake of learning English, I try to read the original version of The Power of Now and Hackers and Painters. To be honest, it&amp;rsquo;s very difficult, two many unacquainted words and phrases. Even only one in a sentence would affect my understanding.
Therefore, I stopped my reading and searched on the Internet for better approach to do this. After a long surfing, Here is the tips that I summarized.</description>
    </item>
    
    <item>
      <title>Document in Lucene</title>
      <link>https://hellokangning.github.io/2017/08/07/document-in-lucene/</link>
      <pubDate>Mon, 07 Aug 2017 18:52:01 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/2017/08/07/document-in-lucene/</guid>
      <description>In Lucene, a Document is the unit of search and index.
 An index consists of a sequence of documents. A document contains of one or more Fields. A field is a named sequence of terms. A term is a string.  In order to index data with Lucene, you must convert it to a stream of plain-text tokens firstly. Based on the stream, the document containning fields will be created.</description>
    </item>
    
    <item>
      <title>Guice usage in Elasticsearch</title>
      <link>https://hellokangning.github.io/2017/08/04/guice-usage-in-elasticsearch/</link>
      <pubDate>Fri, 04 Aug 2017 15:58:27 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/2017/08/04/guice-usage-in-elasticsearch/</guid>
      <description>The motivation of using Guice lists here: Motivation.
To create bindings, extend AbstractModule and override its configure method. In the method body, call bind() to specify each binding. These methods are type checked so the compiler can report errors if you use the wrong types. Once you&amp;rsquo;ve created your modules, pass them as arguments to Guice.createInjector() to build an injector.
Elasticsearch has a ModulesBuilder which is responsible for assembling modules.</description>
    </item>
    
    <item>
      <title>Pip install ipython exception on EI Capitan</title>
      <link>https://hellokangning.github.io/2017/08/03/pip-install-ipython-exception-on-ei-capitan/</link>
      <pubDate>Thu, 03 Aug 2017 15:23:36 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/2017/08/03/pip-install-ipython-exception-on-ei-capitan/</guid>
      <description>for those impatient
OS X EI Capition shipped a security feature named System Integrity Protection, which would be a hinder for pip. Try to install IPython in user mode: pip install ipython --user.
 As a new Pythoner, I want to learn IPython spontaneously. I read the release notes carefully and found that the lastest IPython 6.0 drops Python 2.7 support. This is not a good news for me, who works on OS X EI Caption and built-in Python 2.</description>
    </item>
    
  </channel>
</rss>