<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Qing&#39;s Landing</title>
    <link>https://hellokangning.github.io/zh/post/</link>
    <description>Recent content in Posts on Qing&#39;s Landing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 26 Dec 2018 10:26:19 +0800</lastBuildDate>
    
	<atom:link href="https://hellokangning.github.io/zh/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis 的 SSL</title>
      <link>https://hellokangning.github.io/zh/post/redis-ssl/</link>
      <pubDate>Wed, 26 Dec 2018 10:26:19 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-ssl/</guid>
      <description>&lt;p&gt;这篇博客的起源是一位内部用户询问，Azure Cache for Redis 有没有 &lt;em&gt;.pem&lt;/em&gt; 或者 &lt;em&gt;.cem&lt;/em&gt; 的证书，然后可以在客户端指定它：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import redis

try:
    conn = redis.StrictRedis(
        host=&#39;&amp;lt;cache-name&amp;gt;.redis.cache.windows.net&#39;,
        port=6380,
        password=&#39;your password here&#39;,
        ssl=True,
        ssl_ca_certs=&#39;path to cert&#39;)
    print (conn)
    conn.ping()
    print (&#39;Connected!&#39;)
except Exception as ex:
    print (&#39;Error:&#39;, ex)
    exit(&#39;Failed to connect, terminating.&#39;)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Redis 用作 LRU 缓存</title>
      <link>https://hellokangning.github.io/zh/post/redis-as-an-lru-cache/</link>
      <pubDate>Mon, 24 Dec 2018 16:47:34 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-as-an-lru-cache/</guid>
      <description>&lt;p&gt;本文翻译自 &lt;a href=&#34;https://redis.io/topics/lru-cache&#34;&gt;Using Redis as an LRU Cache&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Redis 作为缓存使用时，很容易在增加新数据时剔除旧数据。这也是 &lt;em&gt;memcached&lt;/em&gt; 的默认行为。&lt;/p&gt;

&lt;p&gt;LRU 只是其中的一种剔除方法。使用 Redis 作为 LRU 时，必须用到 &lt;code&gt;maxmemory&lt;/code&gt; 参数来限制可用内存的大小。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis 同步引发的系统过载</title>
      <link>https://hellokangning.github.io/zh/post/100-server-load-because-of-redis-sync/</link>
      <pubDate>Wed, 28 Nov 2018 14:25:25 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/100-server-load-because-of-redis-sync/</guid>
      <description>&lt;p&gt;今天一早，就有客户来报说机器负载 100%。从日志中看到的现象是，Slave 向 Master 请求部分同步，Master 却要求 Slave 做个全套：全量同步，因为 Slave 发过来的 replication ID 太老了。Slave 说好吧，整个全的，然后消费成功。接着，Slave 还想来个部分同步，上述的过程连续发生 3 次。Master 有点强买强卖的意思了，这样一来两边的 CPU 不干了，这不是加班嘛！二者之间的网络带宽也是突增，从下图可以看出：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hellokangning.github.io/images/redis-network-bandwidth-spiking.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>每周/每日目标法</title>
      <link>https://hellokangning.github.io/zh/post/weekly-daily-goals/</link>
      <pubDate>Thu, 01 Nov 2018 09:44:00 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/weekly-daily-goals/</guid>
      <description>&lt;p&gt;现代社会的工作方式和远古的狩猎时代颇为相似。首先，不管投入的时间有多少，只有取得具体劳动成果的人才能获得报酬。其次，工作都是集中而短暂的，一个好的算法设计通常只需几分钟，但创造的价值却远远超过几百小时的平凡工作。&lt;/p&gt;

&lt;p&gt;但在许多人看来，高产出意味着必须朝九晚九马不停蹄地工作。这实质上是把“重复”看做工作的本质。Scott Young 提出的每周/每日目标的工作方法，完全以工作任务为标准，不管你几点下班都不是关键。核心的问题是，你到底取得了多少成果。&lt;/p&gt;

&lt;p&gt;我执行这个方法已经3年多了，不管是在恣意慵懒的外企，还是在紧张忙碌的创业公司，这种方法都大大提高了我的产出。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>整体式学习的道与术</title>
      <link>https://hellokangning.github.io/zh/post/holitstic-learning/</link>
      <pubDate>Sat, 27 Oct 2018 13:11:01 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/holitstic-learning/</guid>
      <description>&lt;p&gt;Scott Young 的故事已经家喻户晓，他曾在一年内在麻省理工学院（MIT）学完了别人需要四年才能掌握的33门课程，成绩都是 A 或 A+。Scott 将自己的学习方法称之为 &lt;em&gt;整体式学习&lt;/em&gt; （Holistic Learning），并总结出一本 &lt;a href=&#34;https://book.douban.com/subject/25783654/&#34;&gt;《如何高效学习》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这本书很早就出现在我的 TODO 列表中，直到最近才将它读完。放下书本之后，有点后悔没有早点读这本书。虽说书中的一些观点，已经被我用到自己的学习过程中，但大部分都是无意识的，不系统的。所以，效果也是时好时坏。&lt;/p&gt;

&lt;p&gt;本文将书中的观点，结合自己的实践，整理出来。力图做到直观易懂，又结构清晰。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《跟各国人都聊得来》中的方法总结</title>
      <link>https://hellokangning.github.io/zh/post/tips-from-fluent-in-3-months/</link>
      <pubDate>Thu, 25 Oct 2018 14:57:53 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/tips-from-fluent-in-3-months/</guid>
      <description>&lt;p&gt;公开课 &lt;a href=&#34;https://www.coursera.org/learn/learning-how-to-learn&#34;&gt;Learning How to Learn&lt;/a&gt; 中有一段采访 Benny Lewis 的短片，他从一个没有任何语言天赋的学渣，变身掌握12门语言的狂人。看完这段采访后，总感觉意犹未尽，很多观点掷地有声、深以为然。幸好片中推荐了他的书 &lt;a href=&#34;https://book.douban.com/subject/26873699/&#34;&gt;《跟各国人都聊得来》&lt;/a&gt;，趁着空闲，就把这本书读了一遍。&lt;/p&gt;

&lt;p&gt;虽说书中讲述的经历针对语言学习，但方法是通用的，同样适用于其他事物的学习。我将其中的几个重要观点和方法提炼出来，遂成本文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>战胜拖延</title>
      <link>https://hellokangning.github.io/zh/post/overcome-procrastination/</link>
      <pubDate>Sun, 03 Jul 2016 09:07:19 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/overcome-procrastination/</guid>
      <description>&lt;p&gt;拖延是很多人头疼的问题，它把人从无聊的现实中短暂地解脱出来。但长期来看，这是一种自欺欺人，因为事情放在那里不会自己完成。拖延反而可能浪费了做事的最好时机，贻害无穷。&lt;/p&gt;

&lt;p&gt;拖延的坏处可能没有人不知道。即便嘴上说不，但身体还是很诚实的。遇到不喜欢或者困难的事情，我们还是习惯为自己找一些听起来有道理实际荒谬的借口，然后心安理得地将事情抛之脑后。&lt;/p&gt;

&lt;p&gt;解决拖延的问题，和解决其他科学问题没什么两样，都是要先了解它的成因和模式。举个例子，计算机世界里的死锁。明白了死锁形成的四个条件，只要任意破坏一个条件，死锁也就不成立了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>像写作一样写代码</title>
      <link>https://hellokangning.github.io/zh/post/coding-is-analogous-to-writing/</link>
      <pubDate>Wed, 25 May 2016 11:23:36 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/coding-is-analogous-to-writing/</guid>
      <description>&lt;p&gt;订阅 &lt;a href=&#34;https://www.publicationcoach.com/&#34;&gt;Publication Coach&lt;/a&gt; 很久了，越发感到写作和写代码之间的共通之处。本文仅展开一个方面来论述，也是最重要的一个方面，即思考模式。很多人都知道，我们人类的大脑有两种不同的思考模式，称之为 &lt;em&gt;专注模式&lt;/em&gt; 和 &lt;em&gt;发散模式&lt;/em&gt; 。&lt;/p&gt;

&lt;p&gt;专注模式为人熟知，当我们一心一意扑在某些东西上，试着去理解它们的时候，就是“专注”。专注模式致力于落实某个问题的解决方案，或者理解某个概念中最细微的方面。但你必须从一个出发点开始。&lt;/p&gt;

&lt;p&gt;发散模式也受到热捧，它让你更概括地看待事物，以一种完全不同的全景视角。发散模式构建一个全新的想法，你甚至不知道这个想法是怎么来的。随着这个想法在新通道间穿梭，你便可以建立起新的神经连接。发散模式可以帮助我们找到一个解决问题的出发点。&lt;/p&gt;

&lt;p&gt;专注模式和发散模式，像是一枚硬币的两面，只能单独存在。在一个模式中思考，限制了你转换另外一个思维模式的通道。无论是写作还是写代码，我们都是在这两种模式中切换。在多次循环之后，我们才达成了最终的任务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>高效的一天可以这样过</title>
      <link>https://hellokangning.github.io/zh/post/an-efficient-day/</link>
      <pubDate>Tue, 16 Feb 2016 12:34:01 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/an-efficient-day/</guid>
      <description>&lt;p&gt;工具列表 (全部免费):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.appving.com/&#34;&gt;微习惯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/7-minute-workout-seven-high/id650276551?mt=8&#34;&gt;Seven&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;www.yinxiang.com&#34;&gt;Evernote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wunderlist.com&#34;&gt;奇妙清单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pomotodo.com/&#34;&gt;番茄土豆&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/health-through-breath-pranayama/id341935130?mt=8&#34;&gt;Pranayama&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itunes.apple.com/us/app/xi-ma-la-yafm-ting-shu-she/id876336838?mt=8&#34;&gt;喜马拉雅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gotokeep.com/&#34;&gt;Keep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.codoon.com/&#34;&gt;咕咚运动&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
  </channel>
</rss>