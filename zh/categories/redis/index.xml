<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Qing&#39;s Landing</title>
    <link>https://hellokangning.github.io/zh/categories/redis/</link>
    <description>Recent content in Redis on Qing&#39;s Landing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 19 Feb 2019 09:38:14 +0800</lastBuildDate>
    
	<atom:link href="https://hellokangning.github.io/zh/categories/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis Weekly #4</title>
      <link>https://hellokangning.github.io/zh/post/redis-weekly-4/</link>
      <pubDate>Tue, 19 Feb 2019 09:38:14 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-weekly-4/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%B0%E9%97%BB&#34;&gt;新闻&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%A2%AB%E6%89%B9%E4%BC%AA%E5%BC%80%E6%BA%90%E5%88%9A%E5%88%9A%E8%9E%8D%E8%B5%84-6-%E5%8D%83%E4%B8%87%E7%BE%8E%E5%85%83%E7%9A%84-redis-%E6%80%8E%E4%B9%88%E4%BA%86&#34;&gt;被批伪开源！刚刚融资 6 千万美元的 Redis 怎么了？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#redis-dump-go---a-fast-redis-dump-tool&#34;&gt;Redis-dump-go - A fast Redis dump tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%87%E7%AB%A0&#34;&gt;文章&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#top-redis-headaches-for-devops--client-buffers&#34;&gt;Top Redis Headaches for Devops – Client Buffers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cardinality-of-hyperlog-keys-pfcount-is-not-increasing-when-doing-pfadd&#34;&gt;cardinality of hyperlog keys pfcount is not increasing when doing pfadd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#max-number-of-hash-key-2%5E23-&#34;&gt;max number of hash key 2^23 ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Redis Weekly #3</title>
      <link>https://hellokangning.github.io/zh/post/redis-weekly-3/</link>
      <pubDate>Thu, 14 Feb 2019 08:15:06 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-weekly-3/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%87%E7%AB%A0&#34;&gt;文章&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A Key Expired In Redis, You Won&amp;rsquo;t Believe What Happened Next&lt;/li&gt;
&lt;li&gt;Java-Distributed Caching in Redis&lt;/li&gt;
&lt;li&gt;那些年用过的Redis集群架构（含面试解析）&lt;/li&gt;
&lt;li&gt;关于Redis序列化及压缩对性能的影响&lt;/li&gt;
&lt;li&gt;redis面试必问](#redis%E9%9D%A2%E8%AF%95%E5%BF%85%E9%97%AE)&lt;/li&gt;
&lt;li&gt;面试前必须要知道的Redis面试&lt;/li&gt;
&lt;li&gt;Redis源码从哪里读起？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Redis Weekly #2</title>
      <link>https://hellokangning.github.io/zh/post/redis-weekly-2/</link>
      <pubDate>Thu, 14 Feb 2019 07:32:28 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-weekly-2/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%87%E7%AB%A0&#34;&gt;文章&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;从Redis连接池获取连接失败的原因说起&lt;/li&gt;
&lt;li&gt;Redis GEO &amp;amp; 实现原理深度分析&lt;/li&gt;
&lt;li&gt;when will fsync() occur if snapshotting and AOF both are disabled&lt;/li&gt;
&lt;li&gt;Clustering in Redis&lt;/li&gt;
&lt;li&gt;用Python实现redis方轮子-第0篇-了解通信协议&lt;/li&gt;
&lt;li&gt;Redis 基础梳理以及其在渗透测试中的利用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Redis 哨兵：自动故障转移</title>
      <link>https://hellokangning.github.io/zh/post/redis-sentinel-automatic-failover/</link>
      <pubDate>Sat, 02 Feb 2019 14:21:53 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-sentinel-automatic-failover/</guid>
      <description>&lt;p&gt;Redis 哨兵是 Redis 的高可用实现方案。本节首先会回顾主从复制模式下故障处理可能产生的问题，而后引出高可用的概念，最后重点分析 Redis 哨兵的基本架构、优势，以及是如何实现高可用的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本文大部分摘录自：&lt;a href=&#34;https://book.douban.com/subject/26971561/&#34;&gt;Redis开发与运维&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Redis Weekly #1</title>
      <link>https://hellokangning.github.io/zh/post/redis-weekly-1/</link>
      <pubDate>Thu, 31 Jan 2019 08:40:43 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-weekly-1/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%B0%E9%97%BB&#34;&gt;新闻&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://redislabs.com/redisconf19/&#34;&gt;RedisConf19&lt;/a&gt; 将于4月2号在旧金山举行&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%87%E7%AB%A0&#34;&gt;文章&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/427cf97d7951&#34;&gt;Redis主体流程分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jiangxinlingdu.com/redis/2019/01/24/redisinfo.html&#34;&gt;Redis几个重要的健康指标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/vS8IMgBIrfGpZYNUwtXrPQ&#34;&gt;redis开发设计规范及案例分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI4NTA1MDEwNg==&amp;amp;mid=2650774648&amp;amp;idx=1&amp;amp;sn=97f585eadbb3ce0b1cc10caf5230280b&amp;amp;chksm=f3f929edc48ea0fb372dc206bcb6363521e23d65e27c1852de137dc24165967c8d53e3fa11ce#rd&#34;&gt;为什么不搞集群服务也能实现Redis高可用？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dbaplus.cn/news-158-2278-1.html&#34;&gt;实现故障恢复自动化：详解Redis哨兵技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doordash.engineering/2019/01/02/speeding-up-redis-with-compression&#34;&gt;Speeding up Redis with compression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Redis 哨兵: 客户端连接</title>
      <link>https://hellokangning.github.io/zh/post/redis-sentinel-client-connection/</link>
      <pubDate>Tue, 29 Jan 2019 10:21:46 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-sentinel-client-connection/</guid>
      <description>&lt;p&gt;Redis 的主从复制模式下，一旦主节点不可达，需要人工干预进行故障转移，无论对于 Redis 的使用方还是运维方都带来了极大不便。对应用方来说无法感知主节点的变化，可能会造成数据丢失或读错误，也可能会短暂的服务不可用。对于运维来说，整个故障转移需要人工介入，实时性和准确性都无法保障。&lt;/p&gt;

&lt;p&gt;Redis Sentinel(哨兵) 就是为了解决这些问题而生的，它是 Redis 2.8 引入的高可用实现方案，包括故障发现、故障转移、配置中心、客户端通知等。&lt;/p&gt;

&lt;p&gt;本文的关注点是哨兵下的客户端连接问题。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本文大部分摘录自：&lt;a href=&#34;https://book.douban.com/subject/26971561/&#34;&gt;Redis开发与运维&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Redis Weekly #0</title>
      <link>https://hellokangning.github.io/zh/post/redis-weekly-0/</link>
      <pubDate>Wed, 23 Jan 2019 11:05:19 -0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-weekly-0/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%B0%E9%97%BB&#34;&gt;新闻&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Redisson 3.10.1 和 2.15.1 发布&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%96%87%E7%AB%A0&#34;&gt;文章&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;用 Redis 快速实现 BloomFilter&lt;/li&gt;
&lt;li&gt;Redis在秒杀功能的实践&lt;/li&gt;
&lt;li&gt;Redis实现分布式锁的正确姿势&lt;/li&gt;
&lt;li&gt;携程Redis海外机房数据同步实践&lt;/li&gt;
&lt;li&gt;Redis 基本使用及百亿数据量中的使用技巧分享&lt;/li&gt;
&lt;li&gt;携程一次Redis迁移容器后Slowlog“异常”分析&lt;/li&gt;
&lt;li&gt;Redis的数据类型——探究竟&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Redis 全量同步解析</title>
      <link>https://hellokangning.github.io/zh/post/redis-full-sync-explained/</link>
      <pubDate>Sun, 20 Jan 2019 21:38:27 -0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-full-sync-explained/</guid>
      <description>&lt;p&gt;复制功能是高可用 Redis 的基础，同时也是 Redis 日常运维的常见问题。深刻理解复制的工作原理与使用姿势对我们的日常开发和运维都非常重要。&lt;/p&gt;

&lt;p&gt;本文从同步的过程讲起，重点是全量同步的可能问题和运维方法。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;本文大部分摘录自：&lt;a href=&#34;https://book.douban.com/subject/26971561/&#34;&gt;Redis开发与运维&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>页错误引发的 Redis 延迟</title>
      <link>https://hellokangning.github.io/zh/post/redis-anomalous-latency-because-of-page-fault/</link>
      <pubDate>Mon, 07 Jan 2019 14:11:18 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-anomalous-latency-because-of-page-fault/</guid>
      <description>&lt;p&gt;继续每天的知心姐姐时间，这次客户邮件说，CPU 使用率飙升，同时 GET/LLEN 等命令，都要执行几十毫秒。看了一下慢日志，我去：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;Id:900909 When:(1/1/2019 6:16:15 PM) Duration:41564us Command:(Llen PRIVATE ARG)
Id:900908 When:(1/1/2019 6:16:14 PM) Duration:17041us Command:(get PRIVATE ARG)
Id:900907 When:(1/1/2019 6:16:14 PM) Duration:51032us Command:(get PRIVATE ARG)
Id:900906 When:(1/1/2019 6:16:12 PM) Duration:49292us Command:(get PRIVATE ARG)
Id:900905 When:(1/1/2019 6:16:11 PM) Duration:56329us Command:(Llen PRIVATE ARG)
Id:900904 When:(1/1/2019 6:16:10 PM) Duration:10562us Command:(get PRIVATE ARG)
Id:900903 When:(1/1/2019 6:16:10 PM) Duration:35680us Command:(get PRIVATE ARG)
Id:900902 When:(1/1/2019 6:16:10 PM) Duration:16367us Command:(get PRIVATE ARG)
Id:900901 When:(1/1/2019 6:16:10 PM) Duration:29851us Command:(Llen PRIVATE ARG)
Id:900900 When:(1/1/2019 6:16:08 PM) Duration:29050us Command:(get PRIVATE ARG)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Jedis 的常见异常</title>
      <link>https://hellokangning.github.io/zh/post/exceptions-thrown-by-jedis/</link>
      <pubDate>Wed, 02 Jan 2019 16:21:00 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/exceptions-thrown-by-jedis/</guid>
      <description>&lt;p&gt;最近在读的 &lt;a href=&#34;https://book.douban.com/subject/26971561/&#34;&gt;Redis开发与运维&lt;/a&gt;，很好地总结了客户端的常见异常。这篇博客权且作为读书笔记。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis 的 SSL</title>
      <link>https://hellokangning.github.io/zh/post/redis-ssl/</link>
      <pubDate>Wed, 26 Dec 2018 10:26:19 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-ssl/</guid>
      <description>&lt;p&gt;这篇博客的起源是一位内部用户询问，Azure Cache for Redis 有没有 &lt;em&gt;.pem&lt;/em&gt; 或者 &lt;em&gt;.cem&lt;/em&gt; 的证书，然后可以在客户端指定它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;redis&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StrictRedis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;cache-name&amp;gt;.redis.cache.windows.net&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6380&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;your password here&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ssl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ssl_ca_certs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;path to cert&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Connected!&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;except&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Error:&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Failed to connect, terminating.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Redis 用作 LRU 缓存</title>
      <link>https://hellokangning.github.io/zh/post/redis-as-an-lru-cache/</link>
      <pubDate>Mon, 24 Dec 2018 16:47:34 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/redis-as-an-lru-cache/</guid>
      <description>&lt;p&gt;本文翻译自 &lt;a href=&#34;https://redis.io/topics/lru-cache&#34;&gt;Using Redis as an LRU Cache&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;Redis 作为缓存使用时，很容易在增加新数据时剔除旧数据。这也是 &lt;em&gt;memcached&lt;/em&gt; 的默认行为。&lt;/p&gt;

&lt;p&gt;LRU 只是其中的一种剔除方法。使用 Redis 作为 LRU 时，必须用到 &lt;code&gt;maxmemory&lt;/code&gt; 参数来限制可用内存的大小。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Redis 同步引发的系统过载</title>
      <link>https://hellokangning.github.io/zh/post/100-server-load-because-of-redis-sync/</link>
      <pubDate>Wed, 28 Nov 2018 14:25:25 +0800</pubDate>
      
      <guid>https://hellokangning.github.io/zh/post/100-server-load-because-of-redis-sync/</guid>
      <description>&lt;p&gt;今天一早，就有客户来报说机器负载 100%。从日志中看到的现象是，Slave 向 Master 请求部分同步，Master 却要求 Slave 做个全套：全量同步，因为 Slave 发过来的 replication ID 太老了。Slave 说好吧，整个全的，然后消费成功。接着，Slave 还想来个部分同步，上述的过程连续发生 3 次。Master 有点强买强卖的意思了，这样一来两边的 CPU 不干了，这不是加班嘛！二者之间的网络带宽也是突增，从下图可以看出：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hellokangning.github.io/images/redis-network-bandwidth-spiking.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>